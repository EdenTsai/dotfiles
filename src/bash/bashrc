#!/usr/bin/env bash
# vim: set filetype=sh

# Return if not running interactive bash.
if [ -z "${BASH_VERSION:-}" ] || [ -z "${PS1:-}" ]; then
    return
fi

function bashrc::show_bash_version()
{
    bash --version
    echo
}

function bashrc::show_startup_message()
{
    local readonly login_at=$(date +%Y-%m-%dT%H:%M:%S%z)
    echo "Bash started at ${login_at}"
    echo
}

# Load bashrc files in directory if exists, for example:
#     load_bashrc_files_in_directory_if_exists $HOME/bashrc.d
#     -> source $HOME/bashrc.d/*.bashrc
function bashrc::load_bashrc_files_in_directory_if_exists()
{
    local readonly EXIT_CODE_GENERAL_ERROR=1

    local readonly bashrc_dir="${1}"
    if ! test -d "$bashrc_dir"; then
        return ${EXIT_CODE_GENERAL_ERROR}
    fi

    local readonly bashrc_file_glob="${bashrc_dir}/*.bashrc"
    if ls ${bashrc_file_glob} > /dev/null 2>&1; then
        local bashrc_file
        for bashrc_file in ${bashrc_file_glob}; do
            source "${bashrc_file}"
        done
        unset bashrc_file
    fi
}

# Load bashrc configuation.
function bashrc::load_bashrc_configuration()
{
    local readonly bash_dir="$HOME/.bash"
    if test -d "${bash_dir}"; then
        # Source functions first.
        source "${bash_dir}/functions.bashrc"

        # Source functions for Git prompts.
        source "${bash_dir}/functions/git-prompt.sh"

        # Source bashrc.d/*.bashrc if exists.
        bashrc::load_bashrc_files_in_directory_if_exists "${bash_dir}/bashrc.d"

        # Source bashrc.d/os/${OS_TYPE}/*.bashrc if exists,
        # the following OS types are supported:
        #     - Darwin (MacOS)
        #     - FreeBSD
        #     - Linux
        local readonly os_type=$(uname -s)
        bashrc::load_bashrc_files_in_directory_if_exists "${bash_dir}/bashrc.d/os/${os_type}"

        # Source bashrc.d/host/${HOSTNAME}/*.bashrc if exists.
        local readonly hostname=$(hostname)
        bashrc::load_bashrc_files_in_directory_if_exists "${bash_dir}/bashrc.d/host/${hostname}"
    fi
}

# Load $HOME/.bashrc_local if exists.
function bashrc::load_bashrc_local_if_exists()
{
    local readonly bashrc_file="${HOME}/.bashrc_local"
    if test -r "${bashrc_file}"; then
        source "${bashrc_file}"
    fi
}

bashrc::show_bash_version
bashrc::show_startup_message
bashrc::load_bashrc_configuration
bashrc::load_bashrc_local_if_exists
